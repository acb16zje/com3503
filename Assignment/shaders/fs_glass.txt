/* Adapted and modified from https://learnopengl.com/Lighting/Multiple-lights */
/* Adapted and modified from Lab 7, fs_cube.txt */

#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};

struct DirLight {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NUM_DIR_LIGHTS 2

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform Material material;
uniform DirLight dirLight[NUM_DIR_LIGHTS];

vec3 calcDirLight(DirLight light, vec3 norm, vec3 viewDir) {
  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);

  // specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

  // result
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));

  return (ambient + diffuse + specular);
}

void main() {
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 result;

  for (int i = 0; i < NUM_DIR_LIGHTS; i++) {
    result += calcDirLight(dirLight[i], norm, viewDir);
  }

  result /= float(NUM_DIR_LIGHTS);

  fragColor = vec4(result, 0.3);
}