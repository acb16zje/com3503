package models;

import com.jogamp.opengl.*;
import lib.gmaths.*;
import lib.*;

/**
 * I declare that this code is my own work.
 * A class for rendering a floor, a wall with a hole, and a wallpaper with a hole
 *
 * @author Zer Jun Eng
 */
public class Room {

  private Model floor, topWall, bottomWall, leftWall, rightWall;               // Cube shapes
  private Model topWallpaper, bottomWallpaper, leftWallpaper, rightWallpaper;  // TwoTriangles

  private float roomWidth, roomHeight, roomDepth;
  private float windowWidth, windowHeight, windowTopYHeight;
  private float topBottomWallWidth, leftRightWallWidth, leftRightWallHeight;
  private Mat4 wallpaperMat;

  /**
   * Room constructor
   *
   * @param roomDimension The room dimension in width, height, depth
   * @param floor The floor
   */
  public Room(Vec3 roomDimension, Model floor) {
    this.roomWidth = roomDimension.x;
    this.roomHeight = roomDimension.y;
    this.roomDepth = roomDimension.z;
    this.floor = floor;
  }

  /**
   * Creates a scene graph for room which contains floor, wall and wallpaper, then renders them
   *
   * @param gl OpenGL models, for rendering
   */
  public void render(GL3 gl) {
    final float POS_Z = -(roomDepth + Cube.THICKNESS) / 2;

    // Window
    windowWidth = roomWidth * Window.RATIO.x;
    windowHeight = roomHeight * Window.RATIO.y;
    windowTopYHeight = windowHeight + roomHeight * Window.Y_POS;

    // Wall
    topBottomWallWidth = windowWidth;
    leftRightWallWidth = (roomWidth - windowWidth) / 2;
    leftRightWallHeight = roomHeight + Cube.THICKNESS / 2;

    wallpaperMat = Mat4Transform.rotateAroundX(90);
    wallpaperMat = Mat4.multiply(
        Mat4Transform.translate(0, 0, POS_Z + Cube.THICKNESS / 2), wallpaperMat);

    SGNode roomRoot = new NameNode("Room structure");
    TransformNode wallTranslate = new TransformNode("Wall translate",
        Mat4Transform.translate(0, 0, POS_Z));

    createFloor(roomRoot);
    roomRoot.addChild(wallTranslate);
    createBottomWall(gl, wallTranslate);
    createLeftWall(gl, wallTranslate);                       // Left wall
    createRightWall(gl, wallTranslate);                      // Right wall
    createTopWall(gl, wallTranslate);                        // Top wall

    roomRoot.update();

    roomRoot.draw(gl);
  }

  /**
   * Create a floor
   *
   * @param parent Parent node
   */
  private void createFloor(SGNode parent) {
    NameNode floor = new NameNode("Floor");
    Mat4 m = Mat4Transform.scale(roomWidth, 1, roomDepth);
    TransformNode floorTransform = new TransformNode("Floor transform", m);
    ModelNode floorModel = new ModelNode("Floor model", this.floor);

    parent.addChild(floor);
    floor.addChild(floorTransform);
    floorTransform.addChild(floorModel);
  }

  /**
   * Create a bottom wall and a bottom wallpaper
   *
   * @param gl OpenGL models, for rendering
   * @param parent Parent node
   */
  private void createBottomWall(GL3 gl, SGNode parent) {
    final float HEIGHT = (roomHeight + Cube.THICKNESS) * Window.Y_POS;
    final float WALLPAPER_HEIGHT = HEIGHT - Cube.THICKNESS * Window.Y_POS;
    final float POS_Y = (HEIGHT - Cube.THICKNESS) / 2;

    NameNode bottomWall = new NameNode("Bottom wall");
    Mat4 m = Mat4Transform.scale(topBottomWallWidth, 1, HEIGHT);
    m = Mat4.multiply(Mat4Transform.rotateAroundX(90), m);
    m = Mat4.multiply(Mat4Transform.translate(0, POS_Y, 0), m);
    TransformNode bottomWallTransform = new TransformNode("Bottom wall transform", m);
    ModelNode bottomWallModel = new ModelNode("Bottom wall model", this.bottomWall);

    m = Mat4Transform.scale(topBottomWallWidth, 1, WALLPAPER_HEIGHT);
    m = Mat4.multiply(wallpaperMat, m);
    m = Mat4.multiply(Mat4Transform.translate(0, WALLPAPER_HEIGHT / 2, 0), m);
    bottomWallpaper.setModelMatrix(m);
    bottomWallpaper.render(gl);

    parent.addChild(bottomWall);
    bottomWall.addChild(bottomWallTransform);
    bottomWallTransform.addChild(bottomWallModel);
  }

  /**
   * Create a left wall and a left wallpaper
   *
   * @param gl OpenGL models, for rendering
   * @param parent Parent node
   */
  private void createLeftWall(GL3 gl, SGNode parent) {
    final float WALLPAPER_HEIGHT = leftRightWallHeight - Cube.THICKNESS / 2;
    final float POS_X = -(roomWidth - leftRightWallWidth) / 2;
    final float POS_Y = (leftRightWallHeight - Cube.THICKNESS) / 2;

    NameNode leftWall = new NameNode("Left wall");
    Mat4 m = Mat4Transform.scale(leftRightWallWidth, 1, leftRightWallHeight);
    m = Mat4.multiply(Mat4Transform.rotateAroundX(90), m);
    m = Mat4.multiply(Mat4Transform.translate(POS_X, POS_Y, 0), m);
    TransformNode leftWallTransform = new TransformNode("Left wall transform", m);
    ModelNode leftWallModel = new ModelNode("Left wall", this.leftWall);

    m = Mat4Transform.scale(leftRightWallWidth, 1, WALLPAPER_HEIGHT);
    m = Mat4.multiply(wallpaperMat, m);
    m = Mat4.multiply(Mat4Transform.translate(POS_X, WALLPAPER_HEIGHT / 2, 0), m);
    leftWallpaper.setModelMatrix(m);
    leftWallpaper.render(gl);

    parent.addChild(leftWall);
    leftWall.addChild(leftWallTransform);
    leftWallTransform.addChild(leftWallModel);
  }

  /**
   * Create a right wall and a right wallpaper
   *
   * @param gl OpenGL models, for rendering
   * @param parent Parent node
   */
  private void createRightWall(GL3 gl, SGNode parent) {
    final float POS_X = (roomWidth - leftRightWallWidth) / 2;
    final float POS_Y = (leftRightWallHeight - Cube.THICKNESS) / 2;

    NameNode rightWall = new NameNode("Right wall");
    Mat4 m = Mat4Transform.scale(leftRightWallWidth, 1, leftRightWallHeight);
    m = Mat4.multiply(Mat4Transform.rotateAroundX(90), m);
    m = Mat4.multiply(Mat4Transform.translate(POS_X, POS_Y, 0), m);
    TransformNode rightWallTransform = new TransformNode("Right wall transform", m);
    ModelNode rightWallModel = new ModelNode("Right wall", this.rightWall);

    parent.addChild(rightWall);
    rightWall.addChild(rightWallTransform);
    rightWallTransform.addChild(rightWallModel);
  }

  /**
   * Create a top wall and a top wallpaper
   *
   * @param gl OpenGL models, for rendering
   * @param parent Parent node
   */
  private void createTopWall(GL3 gl, SGNode parent) {
    final float WIDTH = windowWidth;
    final float HEIGHT = roomHeight - windowTopYHeight;
    final float POS_Y = windowTopYHeight + HEIGHT / 2;

    NameNode topWall = new NameNode("Top wall");
    Mat4 m = Mat4Transform.scale(WIDTH, 1 , HEIGHT);
    m = Mat4.multiply(Mat4Transform.rotateAroundX(90), m);
    m = Mat4.multiply(Mat4Transform.translate(0, POS_Y, 0), m);
    TransformNode topWallTransform = new TransformNode("Top wall transform", m);
    ModelNode topWallModel = new ModelNode("Top wall model", this.topWall);

    parent.addChild(topWall);
    topWall.addChild(topWallTransform);
    topWallTransform.addChild(topWallModel);
  }

  public class Wall {

    /**
     * @param top The wall above the window
     * @param bottom The wall below the window
     * @param left The wall on the left side of the window
     * @param right The wall on the right side of the window
     */
    public Wall(Model top, Model bottom, Model left, Model right) {
      topWall = top;
      bottomWall = bottom;
      leftWall = left;
      rightWall = right;
    }
  }

  public class Wallpaper {

    /**
     * @param top The wallpaper above the window
     * @param bottom The wallpaper below the window
     * @param left The wallpaper on the left side of the window
     * @param right The wallpaper on the right side of the window
     */
    public Wallpaper(Model top, Model bottom, Model left, Model right) {
      topWallpaper = top;
      bottomWallpaper = bottom;
      leftWallpaper = left;
      rightWallpaper = right;
    }
  }
}
